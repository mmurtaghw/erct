@prefix rr: <http://www.w3.org/ns/r2rml#> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix dbpedia: <http://dbpedia.org/ontology/> .
@prefix erct: <http://www.semanticweb.org/ERCT/> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema/> .
@prefix rrf: <http://kdeg.scss.tcd.ie/ns/rrf#>
@prefix rdfs:  <http://www.w3.org/2000/01/rdf-schema#> .


<#Concat>
	rrf:functionName "concat" ;
	rrf:functionBody """
		function concat(var1, var2) {
		return var1 + " " + var2 ;
	}
	""" ;
.

<#ExtractJel>
	rrf:functionName "extractJel" ;
	rrf:functionBody """
		function extractJel(var1) {
		if (var1 == null){
		return null;
		}
		//print("1")
		var re = /(\\w\\d\\d){1}/g;
		var output = [];
		while ((match =  re.exec(var1)) !== null) {
 		    //print(match);	
 		    output.push(match[0]);
		}
		//print(output);
		return(String(output));
	} 
	""" ;
.

<#ExtractDate>
	rrf:functionName "extractDate" ;
	rrf:functionBody """
		function extractDate(date) {
		
		    var month = date.slice(0,2);
		    var day = date.slice(3,5);	
		    var year = date.slice(6,10);	
		    //print(month);
		    //print(day);
		    //print(year);
		    newDate = day + "/" + month + "/" + year;
		    //print(newDate);
		    var d = new Date(newDate),
			month = '' + (d.getMonth() + 1),
			day = '' + d.getDate(),
			year = d.getFullYear();
		    if (String(d) != "Invalid Date"){
		    	return String(d.toISOString());
		    }
		    return;
}
	""" ;
.

<#ExtractDigits>
	rrf:functionName "extractDigits" ;
	rrf:functionBody """
		function extractDigits(digits) {
		
		    var re = /\\d+/;
		    match =  re.exec(digits);
		    //print(digits);
		    print(match);

		    return String(match);
}
	""" ;
.

<#ExtractResearcher>
	rrf:functionName "extractResearcher" ;
	rrf:functionBody """
		function extractResearcher(researcher) {
		
		    var re = /[^\\s]+\\s+[^\\s]+/;
		    match =  re.exec(researcher);
		    //print(researcher);
		    //print(match);

		    return String(match);
}
	""" ;
.



<#ExtractEmail>
	rrf:functionName "extractEmail" ;
	rrf:functionBody """
		function extractEmail(researcher) {
		
		    var re = /[^\\s]+[\\w]+\\@[\\w | \\W]+/;
		    match =  re.exec(researcher);
		    //print(researcher);
		    //print(match);

		    return String(match);
}
	""" ;
.

<#ExtractCluster>
	rrf:functionName "extractCluster" ;
	rrf:functionBody """
		function extractCluster(cluster) {
		
		    var re = /(household)|(Household)|(Village)|(village)|(school)|(School)|(District)|(district)|(firm) {1}?/;
		    match =  re.exec(cluster);
		    //print(cluster);
		    print(match);

		    return String(match);
}
	""" ;
.

<#ExtractDemVar>
	rrf:functionName "extractDemVar" ;
	rrf:functionBody """
		function extractDemVar(demVar) {
		
		    var re = /(gender)|(Gender)|(county)|(County)|(geographic)|(exam)|(Exam){1}?/;
		    match =  re.exec(demVar);
		    print(demVar);
		    print(match);

		    return String(match);
}
	""" ;
.

<#DOITripleMap>
	a rr:TriplesMap ;
	rr:logicalTable [
		rr:sqlQuery """SELECT RCT_ID, DOI FROM trials"""
	] ;
	rr:subjectMap [
		rr:template "http://www.semanticweb.org/publicationInfo/{RCT_ID}" ;
	] ;
	rr:predicateObjectMap [
		rr:predicateMap [ 
		rr:constant erct:hasDOI ;
		];
		
		rr:objectMap [ 
			rr:column "DOI";
			];
		
	] ;
	.

<#RCTMAP>
	a rr:TriplesMap ;
	rr:logicalTable [
		rr:sqlQuery """SELECT RCT_ID, TITLE FROM trials"""
	] ;
	rr:subjectMap [
		rr:template "http://www.semanticweb.org/RCT/{RCT_ID}" ;
				rr:class erct:RCT ;
	] ;
	rr:predicateObjectMap [
		rr:predicateMap [ 
		rr:constant erct:hasMethodology ;
		];
		
		rr:objectMap [ 
			rr:constant erct:Methodology ;
			];
		
	] ;
	rr:predicateObjectMap [
		rr:predicateMap [ 
		rr:constant erct:hasTreatmentArm ;
		];
		
		rr:objectMap [ 
			rr:constant erct:TreatmentArm ;
			];
		
	] ;
	rr:predicateObjectMap [
		rr:predicateMap [ 
		rr:constant erct:hasProvenanceInfo ;
		];
		
		rr:objectMap [ 
			rr:constant erct:Sampling ;
			];
		
	] ;	
	rr:predicateObjectMap [
		rr:predicateMap [ 
		rr:constant erct:conductedBy ;
		];
		
		rr:objectMap [ 
			rr:constant erct:Researcher ;
			];
		
	] ;	
	rr:predicateObjectMap [
		rr:predicateMap [ 
		rr:constant erct:hasublicationInfo ;
		];
		
		rr:objectMap [ 
			rr:constant erct:publicationInfo ;
			];
		
	] ;
		rr:predicateObjectMap [
		rr:predicate erct:hasTitle ;
		rr:objectMap [ rr:column "TITLE" ; rr:datatype xsd:string];
	] ;
	.	


<#CountryMapping>
	a rr:TriplesMap ;
	rr:logicalTable [
		rr:sqlQuery """SELECT RCT_ID, COUNTRYLEV1, COUNTRYISO FROM trials """
	] ;
	rr:subjectMap [
		rr:template "http://www.semanticweb.org/Country/{RCT_ID}" ;
		rr:class erct:Country ;
	] ;
	rr:predicateObjectMap [
		rr:predicate erct:hasName ;
		rr:objectMap [ rr:column "COUNTRYLEV1" ];
	] ;
		rr:predicateObjectMap [
		rr:predicate erct:hasISO ;
		rr:objectMap [ rr:column "COUNTRYISO" ];
	] ;
	
	.


<#RegionMapping>
	a rr:TriplesMap ;
	rr:logicalTable [
		rr:sqlQuery """SELECT RCT_ID, SUBDIVISION, SUBDIVISIONISO FROM trials """
	] ;
	rr:subjectMap [
		rr:template "http://www.semanticweb.org/Region/{RCT_ID}" ;
		rr:class erct:Country ;
	] ;
	rr:predicateObjectMap [
		rr:predicate erct:hasName ;
		rr:objectMap [ rr:column "SUBDIVISION" ];
	] ;
		rr:predicateObjectMap [
		rr:predicate erct:hasISO ;
		rr:objectMap [ rr:column "SUBDIVISIONISO" ];
	] ;
	rr:predicateObjectMap [
		rr:predicateMap [ 
		rr:constant erct:locatedIn ;
		];
		
		rr:objectMap [ 
			rr:constant erct:Country ;
			];
		
	] ;
	.
	
	

<#StratifedMap>
	a rr:TriplesMap ;
	rr:logicalTable [
		rr:sqlQuery """SELECT RCT_ID, EXPDESIGN, RANDOMIZATION FROM trials WHERE RANDOMIZATION ~* 'stratified' OR EXPDESIGN ~* 'stratified' """
	] ;
	rr:subjectMap [
		rr:template "http://www.semanticweb.org/Stratified/{RCT_ID}" ;
		rr:class erct:Stratified ;
	] ;
	rr:predicateObjectMap [
		rr:predicate rdfs:subClassOf ;
		rr:object erct:Sampling;
	] ;	
	.
	
	

<#StratificationType>
	a rr:TriplesMap ;
	rr:logicalTable [
		rr:sqlQuery """SELECT EXPDESIGN, RANDOMIZATION, RCT_ID FROM trials WHERE (RANDOMIZATION ~* 'stratified' OR EXPDESIGN ~* 'stratified') AND (RANDOMIZATION ~* 'gender' OR RANDOMIZATION ~* 'Gender' OR RANDOMIZATION ~* 'county' OR RANDOMIZATION ~* 'County' OR RANDOMIZATION ~* 'geographic' OR RANDOMIZATION ~* 'exam' OR RANDOMIZATION ~* 'Exam')"""
	] ;
	rr:subjectMap [
		rr:template "http://www.semanticweb.org/Stratified/{RCT_ID}" ;
		rr:class erct:Stratified ;
	] ;
	rr:predicateObjectMap [
		rr:predicate erct:stratifiedBy;
		rr:objectMap    [
	        rrf:functionCall [
	 			rrf:function <#ExtractDemVar> ;
	 			rrf:parameterBindings (
	 				[ rr:column "RANDOMIZATION" ]
	 			) ;
	 		] ; 
	 	]
	] ;
	.
	

<#SamplingMapSampleSize>
	a rr:TriplesMap ;
	rr:logicalTable [
		rr:sqlQuery """SELECT RCT_ID, OBS FROM trials"""
	] ;
	rr:subjectMap [
		rr:template "http://www.semanticweb.org/Sampling/{RCT_ID}" ;
	] ;
	rr:predicateObjectMap [
		rr:predicate erct:hasSampleSize ;
		rr:objectMap    [
		rrf:functionCall [
	 			rrf:function <#ExtractDigits> ;
	 			rrf:parameterBindings (
	 				[ rr:column "OBS" ]
	 			) ;
	 		] ; 
	 	]
	] ;
	.
	

	
<#TreatmentArmMap>
	a rr:TriplesMap ;
	rr:logicalTable [
		rr:sqlQuery """SELECT RCT_ID FROM trials"""
	] ;
	rr:subjectMap [
		rr:template "http://www.semanticweb.org/TreatmentArm/{RCT_ID}" ;
				rr:class erct:TreatmentArm ;
	] ;
	rr:predicateObjectMap [
		rr:predicateMap [ 
		rr:constant erct:hasTimespan ;
		];
		
		rr:objectMap [ 
			rr:constant erct:Timespan ;
			];
	];
	rr:predicateObjectMap [
		rr:predicateMap [ 
		rr:constant erct:takesPlaceIn ;
		];
		
		rr:objectMap [ 
			rr:constant erct:Country ;
			];
		
	] ;
	.
	
<#JELTripleMap>
	a rr:TriplesMap ;
	rr:logicalTable [
		rr:sqlQuery """SELECT RCT_ID, DOI, JEL FROM trials"""
	] ;
	rr:subjectMap [
		rr:template "http://www.semanticweb.org/publicationInfo/{RCT_ID}" ;
		rr:class erct:publicationInfo ;
	] ;

	rr:predicateObjectMap [
		rr:predicate erct:hasJELcode ;
		rr:objectMap    [
	        rrf:functionCall [
	 			rrf:function <#ExtractJel> ;
	 			rrf:parameterBindings (
	 				[ rr:column "JEL" ]
	 			) ;
	 		] ; 
	 	]
	] 
	.


<#StartDateTripleMap>
	a rr:TriplesMap ;
	rr:logicalTable [
		rr:sqlQuery """SELECT RCT_ID, SDATE FROM trials"""
	] ;
	rr:subjectMap [
		rr:template "http://www.semanticweb.org/Timespan/{RCT_ID}" ;
		rr:class erct:Timespan ;
	] ;
	rr:predicateObjectMap [
		rr:predicate erct:hasStartDate ;
		rr:objectMap    [
	        rrf:functionCall [
	 			rrf:function <#ExtractDate> ;
	 			rrf:parameterBindings (
	 				[ rr:column "SDATE" ]
	 			) ;
				 
	 		] ; 
			 rr:datatype xsd:datetime
	 	]
	] ;
	.
	
	
<#EndDateTripleMap>
	a rr:TriplesMap ;
	rr:logicalTable [
		rr:sqlQuery """SELECT RCT_ID, EDATE FROM trials"""
	] ;
	rr:subjectMap [
		rr:template "http://www.semanticweb.org/Timespan/{RCT_ID}" ;
		rr:class erct:Timespan ;
	] ;
	rr:predicateObjectMap [
		rr:predicate erct:hasEndDate ;
		rr:objectMap    [
	        rrf:functionCall [
	 			rrf:function <#ExtractDate> ;
	 			rrf:parameterBindings (
	 				[ rr:column "EDATE" ]
	 			) ;
	 		] ; 
			 rr:datatype xsd:datetime
	 	]
	] ;
	.
	
	

<#ResearcherTripleMap>
	a rr:TriplesMap ;
	rr:logicalTable [
		rr:sqlQuery """SELECT RCT_ID, PRIM FROM trials"""
	] ;
	rr:subjectMap [
		rr:template "http://www.semanticweb.org/Researcher/{RCT_ID}" ;
		rr:class erct:Researcher ;
	] ;
	rr:predicateObjectMap [
		rr:predicate erct:hasName ;
		rr:objectMap    [
	        rrf:functionCall [
	 			rrf:function <#ExtractResearcher> ;
	 			rrf:parameterBindings (
	 				[ rr:column "PRIM" ]
	 			) ;
	 		] ; 
	 	]
	] ;
	.
	
	

<#EmailTripleMap>
	a rr:TriplesMap ;
	rr:logicalTable [
		rr:sqlQuery """SELECT RCT_ID, PRIM FROM trials"""
	] ;
	rr:subjectMap [
		rr:template "http://www.semanticweb.org/Researcher/{RCT_ID}" ;
		rr:class erct:Researcher ;
	] ;
	rr:predicateObjectMap [
		rr:predicate erct:hasEmail ;
		rr:objectMap    [
	        rrf:functionCall [
	 			rrf:function <#ExtractEmail> ;
	 			rrf:parameterBindings (
	 				[ rr:column "PRIM" ]
	 			) ;
	 		] ; 
	 	]
	] ;
	.
	
	
	
<#MDE>
	a rr:TriplesMap ;
	rr:logicalTable [
		rr:sqlQuery """SELECT MDE, RCT_ID FROM trials"""
	] ;
	rr:subjectMap [
		rr:template "http://www.semanticweb.org/Methodology/{RCT_ID}" ;
		rr:class erct:Methodology ;
	] ;
	rr:predicateObjectMap [
		rr:predicate erct:hasMDE ;
		rr:objectMap [ rr:column "MDE" ];
	] ;
	.
	
	
<#RandomisationIndividual>
	a rr:TriplesMap ;
	rr:logicalTable [
		rr:sqlQuery """SELECT RANDOMIZATION, RCT_ID FROM trials WHERE RANDOMIZATION LIKE 'individual'"""
	] ;
	rr:subjectMap [
		rr:template "http://www.semanticweb.org/Randomized/{RCT_ID}" ;
		rr:class erct:Randomized ;
	] ;
	rr:predicateObjectMap [
		rr:predicate rdfs:subClassOf ;
		rr:object erct:Sampling;
	] ;
	.

	
<#RandomisationClustered>
	a rr:TriplesMap ;
	rr:logicalTable [
		rr:sqlQuery """SELECT NUMCLUSTERS, RANDOMIZATION, RCT_ID FROM trials WHERE NUMCLUSTERS != '' AND NUMCLUSTERS != 'N/A' AND NUMCLUSTERS != 'NA' AND RANDOMIZATION NOT LIKE 'individual' """
	] ;
	rr:subjectMap [
		rr:template "http://www.semanticweb.org/Clustered/{RCT_ID}" ;
		rr:class erct:Clustered ;
	] ;
	rr:predicateObjectMap [
		rr:predicate rdfs:subClassOf ;
		rr:object erct:Sampling;
	] ;	
	.
	
		
<#ClusterType>
	a rr:TriplesMap ;
	rr:logicalTable [
		rr:sqlQuery """SELECT NUMCLUSTERS, RANDOMIZATION, RCT_ID FROM trials WHERE NUMCLUSTERS != '' AND NUMCLUSTERS != 'N/A' AND NUMCLUSTERS != 'NA' AND RANDOMIZATION NOT LIKE 'individual' AND NUMCLUSTERS ~* 'village' OR NUMCLUSTERS ~* 'school' OR NUMCLUSTERS ~* 'district'"""
	] ;
	rr:subjectMap [
		rr:template "http://www.semanticweb.org/Clustered/{RCT_ID}" ;
		rr:class erct:Clustered ;
	] ;
	rr:predicateObjectMap [
		rr:predicate rdfs:subClassOf ;
		rr:object erct:Sampling;
	] ;
	rr:predicateObjectMap [
		rr:predicate erct:clusteredBy;
		rr:objectMap    [
	        rrf:functionCall [
	 			rrf:function <#ExtractCluster> ;
	 			rrf:parameterBindings (
	 				[ rr:column "NUMCLUSTERS" ]
	 			) ;
	 		] ; 
	 	]
	] ;
		rr:predicateObjectMap [
		rr:predicate erct:hasNoOfClusters;
		rr:objectMap    [
	        rrf:functionCall [
	 			rrf:function <#ExtractDigits> ;
	 			rrf:parameterBindings (
	 				[ rr:column "NUMCLUSTERS" ]
	 			) ;
	 		] ; 
	 	]
	] ;
	.
	
	
erct:Researcher rdfs:subClassOf erct:Agent .
erct:Randomized rdfs:subClassOf erct:Sampling .
