library(survival)
library(survminer)
library(dplyr)
library(condSURV)
#Using the myeloid Lukemia data built into R
glimpse(myeloid)
calcV <- function(input, eventTime, censorTime, tau){
vArray = c()
for (i in 1:nrow(input)){
#print(censorTime)
if(is.na(eventTime[i])){
eventTime[i] = 100000000000
}
v = min(eventTime[i], censorTime[i])
v = min(v, tau)
if (min(tau,eventTime[i]) >  censorTime[i]){
v = 0
}
vArray = append(v,vArray)
}
return(vArray)
}
inverseWeights <- function(input, eventTime, censorTime, tau,isTreatment, isCensored){
v <- calcV(input, eventTime, censorTime, tau)
surv_object <- Surv(time = censorTime, event = isCensored)
fit1 <- survfit(surv_object ~ isTreatment, data = input, type="kaplan-meier")
suma = summary(fit1, times = v)
out <-  data.frame(suma[6])
input_N <- cbind(input,out)
input_N <- cbind(input_N, v)
print(input_N)
input_N <- input_N %>%
mutate(weights = ifelse(v != 0,(1/surv), 0))
return(input_N)
}
x <- with(myeloid,(inverseWeights(myeloid, txtime,futime,25, trt, death)))
x
library(haven)
library(plyr)
library(readr)
library(data.table)
library(xlsx)
library(haven)
library(plyr)
library(readr)
library(data.table)
library(ggplot2)
knitr::opts_chunk$set(echo = FALSE)
# Loading cs_s0_s5_household data from stata.
path_data<-"/Users/matt/Downloads/R for Stata Users Training/Session 2_ Data Frames Manipulation/1 - Slides/Raw/Raw"
eicv4_housing<-read_dta(paste0(path_data,
"cs_s0_s5_household.dta"))
# Loading cs_s0_s5_household data from stata.
path_data<-"/Users/matt/Downloads/R for Stata Users Training/Session 2_ Data Frames Manipulation/1 - Slides/Raw/Raw/"
eicv4_housing<-read_dta(paste0(path_data,
"cs_s0_s5_household.dta"))
eicv4_person<-read_dta(paste0(path_data,
"cs_S1_S2_S3_S4_S6A_S6E_Person.dta"))
#install.packages("labelled")
#library(labelled)
#variable_description <- var_label(eicv4_person)
nrow(eicv4_housing)
names(eicv4_housing)
dim(eicv4_housing)
summary(eicv4_housing$s5cq9b)
summary(eicv4_housing$s5cq9b)
unique(eicv4_housing$province)
# you Can drop variables using "Equal NULL"
eicv4_housing$s5cq27<-NULL
# You can all also drop multiple variables by indexing the columns.
eicv4_housing[,c("s5dq2", "s5dq3","s5dq4")]<- NULL
# Convert a variable to a factor
eicv4_housing$province <- as.factor(eicv4_housing$province)
# Recode levels of a factor
levels(eicv4_housing$province)[levels(
eicv4_housing$province)==c(1,2,3,4,5)] <-
c("Kigali city", "Nort","East","West","South")
# You can also replace a value within a variable.
eicv4_housing$s5bq7[is.na(eicv4_housing$s5bq7)] <- 0
# Count duplicate
sum(duplicated(eicv4_housing$hhid))
#If you want to remove duplicated elements, use !duplicated():
eicv4_housing_nodup<-eicv4_housing[!duplicated
(eicv4_housing$district),]
#where ! is a logical negation
#You can extract unique elements as follow:
unique(eicv4_housing$province)
# Sort by c1 by ascending
eicv_ordered<-eicv4_housing[order(eicv4_housing$s5bq9a),]
# Sort by c1 by descending
eicv_ordered<-eicv4_housing[order(-eicv4_housing$s5bq9a),]
# Sort by c3 and c4
eicv_ordered_data <-eicv4_housing[order(
eicv4_housing$province,eicv4_housing$s5bq9a),]
subset <- eicv4_housing[2,5]
# Assign labels to a variables "Region"
eicv4_housing$region <- as.character(eicv4_housing$region)
eicv4_housing$region<-
ifelse(eicv4_housing$region=="1","kigali",
ifelse(eicv4_housing$region=="2","east",
ifelse(eicv4_housing$region=="3", "west",
ifelse(eicv4_housing$region=="4","north",
ifelse(eicv4_housing$region=="5","south","other")))))                       # Generate a new variable "water_access" that summarise
# how far is the distance to water sources.
eicv4_housing$water_access<-ifelse(
eicv4_housing$s5cq4>=200, "far",
ifelse(eicv4_housing$s5cq4<200,
"Near","Not applicable"))
# selecting the 30 first rows of DataFrame
eicv4_housing_1 <- eicv4_housing[1:10, ]
# selecting the 30 first rows and 5 columns of DataFrame
eicv4_housing_2 <- eicv4_housing[1:10,1:5]
# selectin 3rd,4th and 7th rows and 5th and 10th columns.
eicv4_housing_3 <- eicv4_housing[c(3,4,7),c(5,10)]
write.xlsx2(eicv4_housing_2, file  = "C:/Users/Matt Murtagh/Downloads/Raw/output.xlsx", sheetName = "EICV Household", append = FALSE)
library(haven)
library(plyr)
library(readr)
library(data.table)
library(ggplot2)
knitr::opts_chunk$set(echo = FALSE)
# Loading cs_s0_s5_household data from stata.
path_data<-"/Users/matt/Downloads/R for Stata Users Training/Session 2_ Data Frames Manipulation/1 - Slides/Raw/Raw/"
eicv4_housing<-read_dta(paste0(path_data,
"cs_s0_s5_household.dta"))
eicv4_person<-read_dta(paste0(path_data,
"cs_S1_S2_S3_S4_S6A_S6E_Person.dta"))
#install.packages("labelled")
#library(labelled)
#variable_description <- var_label(eicv4_person)
nrow(eicv4_housing)
names(eicv4_housing)
dim(eicv4_housing)
summary(eicv4_housing$s5cq9b)
summary(eicv4_housing$s5cq9b)
unique(eicv4_housing$province)
# you Can drop variables using "Equal NULL"
eicv4_housing$s5cq27<-NULL
# You can all also drop multiple variables by indexing the columns.
eicv4_housing[,c("s5dq2", "s5dq3","s5dq4")]<- NULL
# Convert a variable to a factor
eicv4_housing$province <- as.factor(eicv4_housing$province)
# Recode levels of a factor
levels(eicv4_housing$province)[levels(
eicv4_housing$province)==c(1,2,3,4,5)] <-
c("Kigali city", "Nort","East","West","South")
# You can also replace a value within a variable.
eicv4_housing$s5bq7[is.na(eicv4_housing$s5bq7)] <- 0
# Count duplicate
sum(duplicated(eicv4_housing$hhid))
#If you want to remove duplicated elements, use !duplicated():
eicv4_housing_nodup<-eicv4_housing[!duplicated
(eicv4_housing$district),]
#where ! is a logical negation
#You can extract unique elements as follow:
unique(eicv4_housing$province)
# Sort by c1 by ascending
eicv_ordered<-eicv4_housing[order(eicv4_housing$s5bq9a),]
# Sort by c1 by descending
eicv_ordered<-eicv4_housing[order(-eicv4_housing$s5bq9a),]
# Sort by c3 and c4
eicv_ordered_data <-eicv4_housing[order(
eicv4_housing$province,eicv4_housing$s5bq9a),]
subset <- eicv4_housing[2,5]
# Assign labels to a variables "Region"
eicv4_housing$region <- as.character(eicv4_housing$region)
eicv4_housing$region<-
ifelse(eicv4_housing$region=="1","kigali",
ifelse(eicv4_housing$region=="2","east",
ifelse(eicv4_housing$region=="3", "west",
ifelse(eicv4_housing$region=="4","north",
ifelse(eicv4_housing$region=="5","south","other")))))                       # Generate a new variable "water_access" that summarise
# how far is the distance to water sources.
eicv4_housing$water_access<-ifelse(
eicv4_housing$s5cq4>=200, "far",
ifelse(eicv4_housing$s5cq4<200,
"Near","Not applicable"))
# selecting the 30 first rows of DataFrame
eicv4_housing_1 <- eicv4_housing[1:10, ]
# selecting the 30 first rows and 5 columns of DataFrame
eicv4_housing_2 <- eicv4_housing[1:10,1:5]
# selectin 3rd,4th and 7th rows and 5th and 10th columns.
eicv4_housing_3 <- eicv4_housing[c(3,4,7),c(5,10)]
# selecting rows with 5bq3a>29000 and province =2
eicv4_housing_one <- eicv4_housing[
which((eicv4_housing$s5bq3a>29000) & eicv4_housing$province==2), ]
# selecting row with distric code fron 11 to 14
eicv4_housing_two <- eicv4_housing[eicv4_housing$district %in% c(11,12,13,14), ]
write.csv(eicv4_housing_one, file = "C:/Users/Matt Murtagh/Downloads/Raw/Raw/output.csv")
# selecting rows with 5bq3a>29000 and province =2
eicv4_housing_one <- eicv4_housing[
which((eicv4_housing$s5bq3a>29000) & eicv4_housing$province==2), ]
# selecting row with distric code fron 11 to 14
eicv4_housing_two <- eicv4_housing[eicv4_housing$district %in% c(11,12,13,14), ]
write.csv(eicv4_housing_one, file = "/Users/matt/Downloads/R for Stata Users Training/Session 2_ Data Frames Manipulation/1 - Slides/Raw/Raw")
# selecting rows with 5bq3a>29000 and province =2
eicv4_housing_one <- eicv4_housing[
which((eicv4_housing$s5bq3a>29000) & eicv4_housing$province==2), ]
# selecting row with distric code fron 11 to 14
eicv4_housing_two <- eicv4_housing[eicv4_housing$district %in% c(11,12,13,14), ]
write.csv(eicv4_housing_one, file = "/Users/matt/Downloads/R for Stata Users Training/Session 2_ Data Frames Manipulation/1 - Slides/Raw/Raw/output.csv")
library(haven)
library(plyr)
library(readr)
library(data.table)
library(ggplot2)
knitr::opts_chunk$set(echo = FALSE)
# Loading cs_s0_s5_household data from stata.
path_data<-"/Users/matt/Downloads/R for Stata Users Training/Session 2_ Data Frames Manipulation/1 - Slides/Raw/Raw/"
eicv4_housing<-read_dta(paste0(path_data,
"cs_s0_s5_household.dta"))
eicv4_person<-read_dta(paste0(path_data,
"cs_S1_S2_S3_S4_S6A_S6E_Person.dta"))
#install.packages("labelled")
#library(labelled)
#variable_description <- var_label(eicv4_person)
nrow(eicv4_housing)
names(eicv4_housing)
dim(eicv4_housing)
summary(eicv4_housing$s5cq9b)
summary(eicv4_housing$s5cq9b)
unique(eicv4_housing$province)
# you Can drop variables using "Equal NULL"
eicv4_housing$s5cq27<-NULL
# You can all also drop multiple variables by indexing the columns.
eicv4_housing[,c("s5dq2", "s5dq3","s5dq4")]<- NULL
# Convert a variable to a factor
eicv4_housing$province <- as.factor(eicv4_housing$province)
# Recode levels of a factor
levels(eicv4_housing$province)[levels(
eicv4_housing$province)==c(1,2,3,4,5)] <-
c("Kigali city", "Nort","East","West","South")
# You can also replace a value within a variable.
eicv4_housing$s5bq7[is.na(eicv4_housing$s5bq7)] <- 0
# Count duplicate
sum(duplicated(eicv4_housing$hhid))
#If you want to remove duplicated elements, use !duplicated():
eicv4_housing_nodup<-eicv4_housing[!duplicated
(eicv4_housing$district),]
#where ! is a logical negation
#You can extract unique elements as follow:
unique(eicv4_housing$province)
# Sort by c1 by ascending
eicv_ordered<-eicv4_housing[order(eicv4_housing$s5bq9a),]
# Sort by c1 by descending
eicv_ordered<-eicv4_housing[order(-eicv4_housing$s5bq9a),]
# Sort by c3 and c4
eicv_ordered_data <-eicv4_housing[order(
eicv4_housing$province,eicv4_housing$s5bq9a),]
subset <- eicv4_housing[2,5]
# Assign labels to a variables "Region"
eicv4_housing$region <- as.character(eicv4_housing$region)
eicv4_housing$region<-
ifelse(eicv4_housing$region=="1","kigali",
ifelse(eicv4_housing$region=="2","east",
ifelse(eicv4_housing$region=="3", "west",
ifelse(eicv4_housing$region=="4","north",
ifelse(eicv4_housing$region=="5","south","other")))))                       # Generate a new variable "water_access" that summarise
# how far is the distance to water sources.
eicv4_housing$water_access<-ifelse(
eicv4_housing$s5cq4>=200, "far",
ifelse(eicv4_housing$s5cq4<200,
"Near","Not applicable"))
# selecting the 30 first rows of DataFrame
eicv4_housing_1 <- eicv4_housing[1:10, ]
# selecting the 30 first rows and 5 columns of DataFrame
eicv4_housing_2 <- eicv4_housing[1:10,1:5]
# selectin 3rd,4th and 7th rows and 5th and 10th columns.
eicv4_housing_3 <- eicv4_housing[c(3,4,7),c(5,10)]
# selecting rows with 5bq3a>29000 and province =2
eicv4_housing_one <- eicv4_housing[
which((eicv4_housing$s5bq3a>29000) & eicv4_housing$province==2), ]
# selecting row with distric code fron 11 to 14
eicv4_housing_two <- eicv4_housing[eicv4_housing$district %in% c(11,12,13,14), ]
write.csv(eicv4_housing_one, file = "/Users/matt/Downloads/R for Stata Users Training/Session 2_ Data Frames Manipulation/1 - Slides/Raw/Raw/output.csv")
# selecting rows with 5bq3a>10000 and quintile =1
s<-subset(eicv4_housing, quintile == 1 & s5bq3a>=10000)
write.csv(s, file = "C:/Users/Matt Murtagh/Downloads/Raw/Raw/output.csv")
library(haven)
library(plyr)
library(readr)
library(data.table)
library(ggplot2)
knitr::opts_chunk$set(echo = FALSE)
# Loading cs_s0_s5_household data from stata.
path_data<-"/Users/matt/Downloads/R for Stata Users Training/Session 2_ Data Frames Manipulation/1 - Slides/Raw/Raw/"
eicv4_housing<-read_dta(paste0(path_data,
"cs_s0_s5_household.dta"))
eicv4_person<-read_dta(paste0(path_data,
"cs_S1_S2_S3_S4_S6A_S6E_Person.dta"))
#install.packages("labelled")
#library(labelled)
#variable_description <- var_label(eicv4_person)
nrow(eicv4_housing)
names(eicv4_housing)
dim(eicv4_housing)
summary(eicv4_housing$s5cq9b)
summary(eicv4_housing$s5cq9b)
unique(eicv4_housing$province)
# you Can drop variables using "Equal NULL"
eicv4_housing$s5cq27<-NULL
# You can all also drop multiple variables by indexing the columns.
eicv4_housing[,c("s5dq2", "s5dq3","s5dq4")]<- NULL
# Convert a variable to a factor
eicv4_housing$province <- as.factor(eicv4_housing$province)
# Recode levels of a factor
levels(eicv4_housing$province)[levels(
eicv4_housing$province)==c(1,2,3,4,5)] <-
c("Kigali city", "Nort","East","West","South")
# You can also replace a value within a variable.
eicv4_housing$s5bq7[is.na(eicv4_housing$s5bq7)] <- 0
# Count duplicate
sum(duplicated(eicv4_housing$hhid))
#If you want to remove duplicated elements, use !duplicated():
eicv4_housing_nodup<-eicv4_housing[!duplicated
(eicv4_housing$district),]
#where ! is a logical negation
#You can extract unique elements as follow:
unique(eicv4_housing$province)
# Sort by c1 by ascending
eicv_ordered<-eicv4_housing[order(eicv4_housing$s5bq9a),]
# Sort by c1 by descending
eicv_ordered<-eicv4_housing[order(-eicv4_housing$s5bq9a),]
# Sort by c3 and c4
eicv_ordered_data <-eicv4_housing[order(
eicv4_housing$province,eicv4_housing$s5bq9a),]
subset <- eicv4_housing[2,5]
# Assign labels to a variables "Region"
eicv4_housing$region <- as.character(eicv4_housing$region)
eicv4_housing$region<-
ifelse(eicv4_housing$region=="1","kigali",
ifelse(eicv4_housing$region=="2","east",
ifelse(eicv4_housing$region=="3", "west",
ifelse(eicv4_housing$region=="4","north",
ifelse(eicv4_housing$region=="5","south","other")))))                       # Generate a new variable "water_access" that summarise
# how far is the distance to water sources.
eicv4_housing$water_access<-ifelse(
eicv4_housing$s5cq4>=200, "far",
ifelse(eicv4_housing$s5cq4<200,
"Near","Not applicable"))
# selecting the 30 first rows of DataFrame
eicv4_housing_1 <- eicv4_housing[1:10, ]
# selecting the 30 first rows and 5 columns of DataFrame
eicv4_housing_2 <- eicv4_housing[1:10,1:5]
# selectin 3rd,4th and 7th rows and 5th and 10th columns.
eicv4_housing_3 <- eicv4_housing[c(3,4,7),c(5,10)]
# selecting rows with 5bq3a>29000 and province =2
eicv4_housing_one <- eicv4_housing[
which((eicv4_housing$s5bq3a>29000) & eicv4_housing$province==2), ]
# selecting row with distric code fron 11 to 14
eicv4_housing_two <- eicv4_housing[eicv4_housing$district %in% c(11,12,13,14), ]
write.csv(eicv4_housing_one, file = "/Users/matt/Downloads/R for Stata Users Training/Session 2_ Data Frames Manipulation/1 - Slides/Raw/Raw/output.csv")
# selecting rows with 5bq3a>10000 and quintile =1
s<-subset(eicv4_housing, quintile == 1 & s5bq3a>=10000)
write.csv(s, file = "/Users/matt/Downloads/R for Stata Users Training/Session 2_ Data Frames Manipulation/1 - Slides/Raw/Raw")
library(haven)
library(plyr)
library(readr)
library(data.table)
library(ggplot2)
knitr::opts_chunk$set(echo = FALSE)
# Loading cs_s0_s5_household data from stata.
path_data<-"/Users/matt/Downloads/R for Stata Users Training/Session 2_ Data Frames Manipulation/1 - Slides/Raw/Raw/"
eicv4_housing<-read_dta(paste0(path_data,
"cs_s0_s5_household.dta"))
eicv4_person<-read_dta(paste0(path_data,
"cs_S1_S2_S3_S4_S6A_S6E_Person.dta"))
#install.packages("labelled")
#library(labelled)
#variable_description <- var_label(eicv4_person)
nrow(eicv4_housing)
names(eicv4_housing)
dim(eicv4_housing)
summary(eicv4_housing$s5cq9b)
summary(eicv4_housing$s5cq9b)
unique(eicv4_housing$province)
# you Can drop variables using "Equal NULL"
eicv4_housing$s5cq27<-NULL
# You can all also drop multiple variables by indexing the columns.
eicv4_housing[,c("s5dq2", "s5dq3","s5dq4")]<- NULL
# Convert a variable to a factor
eicv4_housing$province <- as.factor(eicv4_housing$province)
# Recode levels of a factor
levels(eicv4_housing$province)[levels(
eicv4_housing$province)==c(1,2,3,4,5)] <-
c("Kigali city", "Nort","East","West","South")
# You can also replace a value within a variable.
eicv4_housing$s5bq7[is.na(eicv4_housing$s5bq7)] <- 0
# Count duplicate
sum(duplicated(eicv4_housing$hhid))
#If you want to remove duplicated elements, use !duplicated():
eicv4_housing_nodup<-eicv4_housing[!duplicated
(eicv4_housing$district),]
#where ! is a logical negation
#You can extract unique elements as follow:
unique(eicv4_housing$province)
# Sort by c1 by ascending
eicv_ordered<-eicv4_housing[order(eicv4_housing$s5bq9a),]
# Sort by c1 by descending
eicv_ordered<-eicv4_housing[order(-eicv4_housing$s5bq9a),]
# Sort by c3 and c4
eicv_ordered_data <-eicv4_housing[order(
eicv4_housing$province,eicv4_housing$s5bq9a),]
subset <- eicv4_housing[2,5]
# Assign labels to a variables "Region"
eicv4_housing$region <- as.character(eicv4_housing$region)
eicv4_housing$region<-
ifelse(eicv4_housing$region=="1","kigali",
ifelse(eicv4_housing$region=="2","east",
ifelse(eicv4_housing$region=="3", "west",
ifelse(eicv4_housing$region=="4","north",
ifelse(eicv4_housing$region=="5","south","other")))))                       # Generate a new variable "water_access" that summarise
# how far is the distance to water sources.
eicv4_housing$water_access<-ifelse(
eicv4_housing$s5cq4>=200, "far",
ifelse(eicv4_housing$s5cq4<200,
"Near","Not applicable"))
# selecting the 30 first rows of DataFrame
eicv4_housing_1 <- eicv4_housing[1:10, ]
# selecting the 30 first rows and 5 columns of DataFrame
eicv4_housing_2 <- eicv4_housing[1:10,1:5]
# selectin 3rd,4th and 7th rows and 5th and 10th columns.
eicv4_housing_3 <- eicv4_housing[c(3,4,7),c(5,10)]
# selecting rows with 5bq3a>29000 and province =2
eicv4_housing_one <- eicv4_housing[
which((eicv4_housing$s5bq3a>29000) & eicv4_housing$province==2), ]
# selecting row with distric code fron 11 to 14
eicv4_housing_two <- eicv4_housing[eicv4_housing$district %in% c(11,12,13,14), ]
write.csv(eicv4_housing_one, file = "/Users/matt/Downloads/R for Stata Users Training/Session 2_ Data Frames Manipulation/1 - Slides/Raw/Raw/output.csv")
# selecting rows with 5bq3a>10000 and quintile =1
s<-subset(eicv4_housing, quintile == 1 & s5bq3a>=10000)
write.csv(s, file = "/Users/matt/Downloads/R for Stata Users Training/Session 2_ Data Frames Manipulation/1 - Slides/Raw/Raw/output2.csv")
# selecting row with quintile equal 1 and 2
eicv4_housing_two <- eicv4_housing[
eicv4_housing$quintile %in% c(1,2), ]
# You can summarize or filter your data using "by"
eicv_housing<-data.table(eicv4_housing)
rent_by_province = eicv_housing[, mean(s5bq3a, na.rm = T),
by="province"]
# for multiple column you can add "list"
rent_by_province = eicv_housing[, list(
mean_rent= mean(s5bq3a, na.rm = T),
hh_size=sum(s5aq5)),by="province"]
# To summarize by "province" and "ur"
eicv_housing<-data.table (eicv4_housing)
rent_by_province_ur2_2012 = eicv_housing[, list(
mean_rent= mean(s5bq3a, na.rm = T),
hh_size=sum(s5aq5)),by=c("province", "quintile")]
# Visualise summarize rent_by_province using ggplot2
rent_by_province = eicv_housing[, list(
mean_rent= mean(s5bq3a, na.rm = T),
hh_size=sum(s5aq5)),by="province"]
#ggplot(rent_by_province, aes(province,mean_rent)) + geom_point()
#Or
eicv_housing<-data.table (eicv4_housing)
rent_by_province_quintile = eicv_housing[, list(
mean_rent= mean(s5bq3a, na.rm = T),
hh_size=sum(s5aq5)),by=c("province", "quintile")]                              # ggplot(rent_by_province_quintile, aes(province,mean_rent),
#  color=ur2_2012) + geom_point()
EICV4_poverty<-read_dta(paste0(path_data,"EICV4_poverty_file.dta"))
eicv4_merged <-merge(eicv4_housing, EICV4_poverty,
by="hhid", all= T)
nc <- 5
nr <- 10
# Create five tables with nc columns and nr rows.
df1 <- as.data.frame(replicate(nc, rnorm(nr)))
df2 <- as.data.frame(replicate(nc, rnorm(nr)))
df3<-rbind(df1,df2)
library(tidyverse)
setwd("/Users/matt/Documents/CompSci/UpliftFolder/erct/Uplift")
read.csv("wb_data.csv")
pivot_longer(wb, Statistic)
library(tidyverse)
setwd("/Users/matt/Documents/CompSci/UpliftFolder/erct/Uplift")
wb <- read.csv("wb_data.csv")
pivot_longer(wb, Statistic)
library(tidyverse)
setwd("/Users/matt/Documents/CompSci/UpliftFolder/erct/Uplift")
wb <- read.csv("wb_data.csv")
pivot_longer(wb, CODE)
pivot <- pivot_longer(wb, CODE)
View(pivot)
library(tidyverse)
setwd("/Users/matt/Documents/CompSci/UpliftFolder/erct/Uplift")
wb <- read.csv("wb_data.csv")
pivot <- pivot_wider(wb, CODE)
View(pivot)
library(tidyverse)
setwd("/Users/matt/Documents/CompSci/UpliftFolder/erct/Uplift")
wb <- read.csv("wb_data.csv")
pivot <- pivot_wider(wb, CODE, values_from = STATISTIC)
library(tidyverse)
setwd("/Users/matt/Documents/CompSci/UpliftFolder/erct/Uplift")
wb <- read.csv("wb_data.csv")
pivot <- pivot_wider(wb, names_from = CODE, values_from = STATISTIC)
library(tidyverse)
setwd("/Users/matt/Documents/CompSci/UpliftFolder/erct/Uplift")
wb <- read.csv("wb_data.csv")
pivot <- pivot_wider(wb, names_from = CODE, values_from = 2019)
library(tidyverse)
setwd("/Users/matt/Documents/CompSci/UpliftFolder/erct/Uplift")
wb <- read.csv("wb_data.csv")
pivot <- pivot_wider(wb, names_from = CODE, values_from = 10)
library(tidyverse)
setwd("/Users/matt/Documents/CompSci/UpliftFolder/erct/Uplift")
wb <- read.csv("wb_data.csv")
pivot <- pivot_wider(wb, names_from = CODE, values_from = 10)
wb <- read.csv("wb_data.csv")
library(tidyverse)
setwd("/Users/matt/Documents/CompSci/UpliftFolder/erct/Uplift")
wb <- read.csv("wb_data.csv")
pivot <- pivot_wider(wb, names_from = CODE, values_from = Y2019)
